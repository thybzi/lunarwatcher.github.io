<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on Olivia's blog</title><link>https://lunarwatcher.github.io/notes/</link><description>Recent content in Notes on Olivia's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 24 Dec 2021 23:24:25 +0100</lastBuildDate><atom:link href="https://lunarwatcher.github.io/notes/feed.xml" rel="self" type="application/rss+xml"/><item><title>Devlogs: part 1</title><link>https://lunarwatcher.github.io/notes/devlogs-1.html</link><pubDate>Fri, 24 Dec 2021 23:24:25 +0100</pubDate><guid>https://lunarwatcher.github.io/notes/devlogs-1.html</guid><description>Note: moving to a series instead. Future devlogs can be found as a part of @devlogs This page will be removed in the future; the previous content has been moved to the series.</description></item><item><title>Macro Cheatsheet</title><link>https://lunarwatcher.github.io/notes/macro-cheatsheet.html</link><pubDate>Sat, 04 Sep 2021 15:33:11 +0200</pubDate><guid>https://lunarwatcher.github.io/notes/macro-cheatsheet.html</guid><description> Feature Example Comment #arg #define FUNC(x) #x Converts arg to a string ##arg #define FUNC(x) something##x Converts arg to plain text. Useful for sneaking a variable argument into a function name</description></item><item><title>Canonicals</title><link>https://lunarwatcher.github.io/notes/canonicals.html</link><pubDate>Sun, 18 Jul 2021 16:29:51 +0200</pubDate><guid>https://lunarwatcher.github.io/notes/canonicals.html</guid><description>A while ago, I started keeping a list of the canonicals for various questions on Stack Overflow, at least where I found suitable ones for problems that show up often.
This page contains all the various dupes I've found, sorted by categories.
Android Changing app type (weak): https://stackoverflow.com/q/64005603/6296561 Inter-app Stop other apps: https://stackoverflow.com/q/29887429/6296561 Intra-app Activity-&amp;gt;activity: https://stackoverflow.com/q/2091465/6296561 Fragment-&amp;gt;activity: https://stackoverflow.com/q/9343241/6296561 Activity-&amp;gt;fragment: https://stackoverflow.com/q/12739909/6296561 Fragment-&amp;gt;fragment in different activities: https://stackoverflow.com/q/16036572/6296561 Fragment-&amp;gt;fragment: https://stackoverflow.</description></item><item><title>Matrix mouse picking</title><link>https://lunarwatcher.github.io/notes/matrix-mouse-picking.html</link><pubDate>Sun, 18 Jul 2021 11:42:36 +0200</pubDate><guid>https://lunarwatcher.github.io/notes/matrix-mouse-picking.html</guid><description>glm::unProject is a fucking lifesaver.
For it to work properly, GL_DEPTH_TEST has to be enabled. This allows glGetPixels() to return a value != 1 for GL_DEPTH_COMPONENT, which is necessary to unproject the correct coordinates.
The documentation for unProject is trash. It claims the second parameter is a model-view matrix (model * view, or as I like to call it, transMatrix * camMatrix), or just a model matrix. Obligatory reminder that the model matrix is primarily used to transform the position of an object, which doesn't really matter.</description></item><item><title>Physics engine design</title><link>https://lunarwatcher.github.io/notes/physics-engine-design.html</link><pubDate>Mon, 05 Jul 2021 12:33:21 +0200</pubDate><guid>https://lunarwatcher.github.io/notes/physics-engine-design.html</guid><description>(primarly written for an existing project)
The main problem with integrating a physics engine architecture on top of the existing planned AI architecture is that they're separate, but still have overlap.
Optimally, the physics engine needs to track all the entities, and the AI controllers track a subset. This difference is unfortunately why things get hard.
Each AI controller can get away with a linear container, where the physics engine also need to store its controlled entities in a tree-like data structure, primarily to optimize for click events.</description></item></channel></rss>